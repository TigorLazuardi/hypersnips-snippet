snippet `^\s*func(\d)` "Create function declaration" A
// ${1:function_name} ${999:function}
func ${1:function_name}(``
const args = []
const argNumber = parseInt(m[1])

for (let i = 0, j = 0; i < argNumber * 2; i += 2, j++) {
    const placeHolderTab = i + 3
    const argIndex = j + 1 
    const varName = `\${${placeHolderTab + 1}:arg${argIndex}}`
    const varType = `\${${placeHolderTab + 2}:T}`
    args.push(`${varName} ${varType}`)
}

rv = args.join(', ')
``) $2 {
    $0
    return
}
endsnippet

snippet struct "Create struct declaration" b
// ${1:struct_name} ${999:struct}
type ${1:struct_name} struct {
    $0
}
endsnippet

snippet `meth(\d)` "Create method declaration" A
// ${2:method_name} ${999:method}
func (``
rv = t[0].length 
    ? t[0].split(/(?=[A-Z])/).map(e => e[0] === '*'
        ? e[1]?.toLowerCase() || ""
        : e[0].toLowerCase()).join('')
    : "" `` $1) ${2:method_name}(``
const args = []
const argNumber = parseInt(m[1])

for (let i = 0, j = 0; i < argNumber * 2; i += 2, j++) {
    const placeHolderTab = i + 4
    const argIndex = j + 1 
    const varName = `\${${placeHolderTab + 1}:arg${argIndex}}`
    const varType = `\${${placeHolderTab + 2}:T}`
    args.push(`${varName} ${varType}`)
}

rv = args.join(', ')
``) $3 {
    $0
    return
}
endsnippet

snippet forr "For range" b
for $1 := range $2 {
    $0
}
endsnippet

snippet `msi(\d)` "map[string]interface{}" A
``
const base = [
    "map[string]interface{}{",
    "}"
]
const argNumber = parseInt(m[1])
if (!argNumber) {
    base.splice(1, 0, '$0')
} else {
    for (let i = 0, j = 1; i < argNumber * 2; i+= 2, j++) {
        base.splice(j, 0, `\n\t"\${${i + 1}:key}": \${${i + 2}:value},`) 
    }
    base[base.length - 1] = "\n}"
}
rv = base.join('')
``
endsnippet